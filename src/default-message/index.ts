// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const defaultMessages: Record<string, string | ((arg: any) => string)> =
  {
    required: "This field is required.",
    nullable: "This field cannot be null.",
    optional: "",
    allowEmpty: "",
    maxLength: (arg: number) => `Maximum length is ${arg} characters.`,
    minLength: (arg: number) => `Minimum length is ${arg} characters.`,
    pattern: "Invalid format.",
    email: "Invalid email address.",
    numeric: "This field must be numeric.",
    alphanumeric: "This field must be alphanumeric.",
    matches: "This field does not match.",
    trim: "",
    lowercase: "This field must be in lowercase.",
    uppercase: "This field must be in uppercase.",
    startsWith: (arg: string) => `Must start with ${arg}.`,
    endsWith: (arg: string) => `Must end with ${arg}.`,
    phone: "Invalid phone number.",
    creditCard: "Invalid credit card number.",
    password: "Invalid password.",
    confirmPassword: "Passwords do not match.",
    alpha: "This field must contain only letters.",
    base32: "Invalid base32 value.",
    base58: "Invalid base58 value.",
    maxValue: (arg: number) => `Maximum value is ${arg}.`,
    minValue: (arg: number) => `Minimum value is ${arg}.`,
    lessThan: (arg: number) => `Value must be less than ${arg}.`,
    moreThan: (arg: number) => `Value must be more than ${arg}.`,
    positive: "Value must be positive.",
    negative: "Value must be negative.",
    integer: "Value must be an integer.",
    truncate: "",
    round: "",
    decimalPlaces: (arg: number) => `Maximum ${arg} decimal places allowed.`,
    base: (arg: number) => `Invalid base ${arg} number.`,
    evenOnly: "Value must be even.",
    divisibleBy: (arg: number) => `Value must be divisible by ${arg}.`,
    equals: "Values do not match.",
    date: "Invalid date.",
    dateTime: "Invalid date and time.",
    time: "Invalid time.",
    fileType: "Invalid file type.",
    fileSize: "File size too large.",
    boolean: "This field must be true or false.",
    url: "Invalid URL.",
    checkboxRequired: "This checkbox is required.",
    asyncCheck: "Async validation failed.",
    custom: "This field failed validation.",
  };
